@*<Inherits>*@
@inherits Microsoft.AspNetCore.Components.Forms.InputText
@*</Inherits>*@
@using System.ComponentModel.DataAnnotations;
@using System;
@using System.Reflection;
@using Microsoft.AspNetCore.Components.Forms;

<div class="form-group">
    <label for="@id.ToString()">@LabelText</label>
    <input id="@id.ToString()" type="@Type" class="form-control @CssClass" @attributes="@AdditionalAttributes" @onfocus="@(()=>ShowError=true)" placeholder="@PlaceHolder" @bind="@CurrentValue">
    @*<Description>*@
    @if (!string.IsNullOrWhiteSpace(Description))
    {
        <small class="form-text text-muted">@Description</small>
    }
    @*</Description>*@

    @*<Error>*@
    @if (ShowError)
    {
        @foreach (var message in EditContext.GetValidationMessages(FieldIdentifier))
        {
            <div class="validation-message">@message</div>
        }
    }
    @if (CssClass.Contains("modified") && !EditContext.GetValidationMessages(FieldIdentifier).Any() && !string.IsNullOrEmpty(SuccessMessage))
    {
        <div class="valid-feedback">@string.Format(SuccessMessage, this.Value)</div>
    }
    @*</Error>*@

</div>
@code{
Guid id = Guid.NewGuid();
@*<Parameters>*@
[Parameter] public bool ShowError { get; set; } = false;
[Parameter] public string LabelText { get; set; } = "";
[Parameter] public string PlaceHolder { get; set; } = "";
[Parameter] public string Description { get; set; } = "";
[Parameter] public string SuccessMessage { get; set; } = "";
[Parameter] public string Type { get; set; } = "text";
 @*</Parameters>*@

protected override Task OnParametersSetAsync()
{
    try
    {
            @*<Reflection>*@
            var displayattribute = this.FieldIdentifier.Model.GetType()
            .GetProperty(this.FieldIdentifier.FieldName)
            .GetCustomAttribute<DisplayAttribute>();
            if (displayattribute != null)
            {
                var displayName = displayattribute.Name;
                if (!string.IsNullOrEmpty(displayName) && string.IsNullOrEmpty(LabelText))
                {
                    LabelText = displayName;
                }
                var placeholder = displayattribute.Prompt;
                if (!string.IsNullOrEmpty(placeholder) && string.IsNullOrEmpty(PlaceHolder))
                {
                    PlaceHolder = placeholder;
                }
                var description = displayattribute.Description;
                if (!string.IsNullOrEmpty(description) && string.IsNullOrEmpty(Description))
                {
                    Description = description;
                }
            }
            @*</Reflection>*@
    }
    catch { }

    return base.OnParametersSetAsync();
}
}